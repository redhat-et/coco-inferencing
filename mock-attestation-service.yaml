apiVersion: v1
kind: ConfigMap
metadata:
  name: mock-as-config
data:
  # Configurable attestation policy
  attestation-policy.json: |
    {
      "version": "1.0",
      "demo_mode": true,
      "policies": {
        "allow_scenario": {
          "enabled": true,
          "description": "Allow access - simulates successful attestation",
          "response": {
            "status": "success",
            "tee_evidence": {
              "platform": "simulated-tee",
              "security_version": 2,
              "measurement": "abc123def456"
            },
            "resource_policy": {
              "allow_access": true
            }
          }
        },
        "deny_scenario": {
          "enabled": false,
          "description": "Deny access - simulates failed attestation",
          "response": {
            "status": "failed",
            "error": "Invalid TEE measurement",
            "tee_evidence": {
              "platform": "unknown",
              "security_version": 0
            },
            "resource_policy": {
              "allow_access": false
            }
          }
        }
      }
    }
    
  app.py: |
    #!/usr/bin/env python3
    import json
    import os
    from flask import Flask, request, jsonify
    
    app = Flask(__name__)
    
    def load_policy():
        with open('/etc/config/attestation-policy.json', 'r') as f:
            return json.load(f)
    
    @app.route('/attest', methods=['POST'])
    def attest():
        """Mock attestation endpoint"""
        policy = load_policy()
        
        # Check which scenario is enabled
        if policy['policies']['allow_scenario']['enabled']:
            response = policy['policies']['allow_scenario']['response']
            print(f"‚úÖ ALLOW: {policy['policies']['allow_scenario']['description']}")
            return jsonify(response), 200
        elif policy['policies']['deny_scenario']['enabled']:
            response = policy['policies']['deny_scenario']['response']
            print(f"‚ùå DENY: {policy['policies']['deny_scenario']['description']}")
            return jsonify(response), 403
        else:
            return jsonify({"status": "error", "message": "No policy enabled"}), 500
    
    @app.route('/health', methods=['GET'])
    def health():
        return jsonify({"status": "healthy"}), 200
    
    @app.route('/policy', methods=['GET'])
    def get_policy():
        """Debug endpoint to view current policy"""
        return jsonify(load_policy()), 200
    
    if __name__ == '__main__':
        print("üîç Mock Attestation Service starting...")
        policy = load_policy()
        for name, scenario in policy['policies'].items():
            status = "ENABLED" if scenario['enabled'] else "disabled"
            print(f"   {name}: {status} - {scenario['description']}")
        app.run(host='0.0.0.0', port=8080, debug=True)

---
apiVersion: v1
kind: Service
metadata:
  name: mock-attestation-service
spec:
  selector:
    app: mock-attestation-service
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-attestation-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mock-attestation-service
  template:
    metadata:
      labels:
        app: mock-attestation-service
    spec:
      containers:
      - name: mock-as
        image: python:3.11-slim
        command: ["sh", "-c", "pip install flask && python3 /app/app.py"]
        ports:
        - containerPort: 8080
        env:
        - name: FLASK_ENV
          value: "development"
        volumeMounts:
        - name: app-code
          mountPath: /app
        - name: config
          mountPath: /etc/config
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      initContainers:
      - name: install-deps
        image: python:3.11-slim
        command: ["pip", "install", "flask"]
        volumeMounts:
        - name: pip-cache
          mountPath: /root/.cache/pip
      volumes:
      - name: app-code
        configMap:
          name: mock-as-config
          items:
          - key: app.py
            path: app.py
            mode: 0755
      - name: config
        configMap:
          name: mock-as-config
      - name: pip-cache
        emptyDir: {}